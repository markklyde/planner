<!DOCTYPE html>
<html lang="ru">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Розовый Планировщик</title>
	<style>
		:root {
			--bg-color: #fff0f5;
			--text-color: #4a4a4a;
			--primary: #ffb6c1;
			--secondary: #ff69b4;
			--card-bg: #ffe4e1;
			--border-radius: 12px;
			--gap: 0.5rem;
		}

		#splash-screen {
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: var(--bg-color);
			display: flex;
			justify-content: center;
			align-items: center;
			font-size: 3rem;
			z-index: 1000;
			animation: fadeOut 1s 2s forwards;
		}

		@keyframes fadeOut {
			from {
				opacity: 1;
			}

			to {
				opacity: 0;
				display: none;
			}
		}

		body {
			font-family: 'Arial Rounded MT Bold', Arial, sans-serif;
			background: var(--bg-color);
			color: var(--text-color);
			margin: 0;
			padding: 20px;
		}

		.container {
			max-width: 100%;
			margin: 0 auto;
		}

		.week-navigation {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 1rem;
			gap: 0.5rem;
		}

		.week-grid {
			display: grid;
			grid-template-columns: repeat(7, 1fr);
			gap: 0.25rem;
			overflow-x: auto;
			padding-bottom: 1rem;
		}

		.day-column {
			background: var(--card-bg);
			padding: 0.75rem;
			border-radius: var(--border-radius);
			min-width: 150px;
			min-height: 300px;
		}

		.task-card {
			background: white;
			padding: 0.75rem;
			border-radius: 8px;
			margin-bottom: 0.5rem;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		}

		button {
			background: var(--primary);
			color: var(--text-color);
			border: none;
			padding: 0.5rem 1rem;
			border-radius: 20px;
			cursor: pointer;
			transition: all 0.3s ease;
		}

		button:hover {
			background: var(--secondary);
			color: white;
		}

		.modal {
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: rgba(0, 0, 0, 0.5);
			display: none;
			justify-content: center;
			align-items: center;
		}

		.modal-content {
			background: white;
			padding: 2rem;
			border-radius: var(--border-radius);
			width: 90%;
			max-width: 400px;
		}

		.undo-container {
			position: fixed;
			bottom: 20px;
			right: 20px;
			background: var(--card-bg);
			padding: 1rem;
			border-radius: var(--border-radius);
			box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
			display: none;
		}
	</style>
</head>

<body>
	<div id="splash-screen"> Привет, Нияра! </div>

	<div class="container">
		<div class="undo-container" id="undo-container">
			<span>Удалено: </span><span id="undo-title"></span>
			<button onclick="undoDelete()" style="margin-top: 0.5rem;">Вернуть</button>
		</div>

		<div class="week-navigation">
			<button onclick="changeWeek(-7)">⬅️</button>
			<h3 id="week-range"></h3>
			<button onclick="changeWeek(7)">➡️</button>
		</div>

		<div class="week-grid" id="week-grid"></div>

		<button onclick="showModal()" style="position: fixed; bottom: 20px; left: 20px;">➕ Добавить</button>

		<div id="task-modal" class="modal">
			<div class="modal-content">
				<h2>Новая задача</h2>
				<div>
					<label>Название:</label>
					<input type="text" id="task-title" required>
                </div>
					<div>
						<label>Дата:</label>
						<input type="date" id="task-date" required>
                </div>
						<div>
							<label>Описание:</label>
							<textarea id="task-description"></textarea>
						</div>
						<div style="margin-top: 1rem;">
							<button onclick="addTask()">Сохранить</button>
							<button onclick="hideModal()" style="background: #ccc;">Отмена</button>
						</div>
					</div>
				</div>
			</div>

			<script>
				let currentDate = new Date();
        let tasks = JSON.parse(localStorage.getItem('tasks')) || [];
        let lastDeletedTask = null;
        let undoTimeout = null;

        function getWeekDates(date) {
            const start = new Date(date);
            start.setDate(date.getDate() - date.getDay() + 1);
            return Array.from({length: 7}, (_, i) => {
                const d = new Date(start);
                d.setDate(start.getDate() + i);
                return d;
            });
        }

        function renderWeek() {
            const weekDates = getWeekDates(currentDate);
            document.getElementById('week-range').textContent = 
                `${weekDates[0].toLocaleDateString()} - ${weekDates[6].toLocaleDateString()}`;

            const weekGrid = document.getElementById('week-grid');
            weekGrid.innerHTML = '';

            weekDates.forEach(date => {
                const dayElement = document.createElement('div');
                dayElement.className = 'day-column';
                dayElement.innerHTML = `
                    <h3>${date.toLocaleDateString('ru-RU', { weekday: 'short' })}</h3>
                    <small>${date.toLocaleDateString()}</small>
                    <div class="tasks" data-date="${date.toISOString().split('T')[0]}"></div>
                `;
                weekGrid.appendChild(dayElement);
            });

            renderTasks();
        }

        function renderTasks() {
            document.querySelectorAll('.tasks').forEach(container => {
                const date = container.dataset.date;
                const dayTasks = tasks.filter(task => task.date === date);
                
                container.innerHTML = dayTasks.map(task => `
                    <div class="task-card" data-task-id="${task.id}">
                        <h4>${task.title}</h4>
                        ${task.description ? `<p>${task.description}</p>` : ''}
                        <button onclick="deleteTask('${task.id}')">Удалить</button>
                    </div>
                `).join('');
            });
        }

        function addTask() {
            const newTask = {
                id: Date.now().toString(),
                title: document.getElementById('task-title').value,
                date: document.getElementById('task-date').value,
                description: document.getElementById('task-description').value
            };

            tasks.push(newTask);
            localStorage.setItem('tasks', JSON.stringify(tasks));
            hideModal();
            renderWeek();
        }

        function deleteTask(taskId) {
            const taskIndex = tasks.findIndex(t => t.id === taskId);
            if (taskIndex > -1) {
                lastDeletedTask = tasks.splice(taskIndex, 1)[0];
                showUndo(lastDeletedTask.title);
                localStorage.setItem('tasks', JSON.stringify(tasks));
                renderWeek();
            }
        }

        function showUndo(title) {
            const undoContainer = document.getElementById('undo-container');
            document.getElementById('undo-title').textContent = title;
            undoContainer.style.display = 'block';
            
            if (undoTimeout) clearTimeout(undoTimeout);
            undoTimeout = setTimeout(() => {
                undoContainer.style.display = 'none';
                lastDeletedTask = null;
            }, 5000);
        }

        function undoDelete() {
            if (lastDeletedTask) {
                tasks.push(lastDeletedTask);
                localStorage.setItem('tasks', JSON.stringify(tasks));
                renderWeek();
                document.getElementById('undo-container').style.display = 'none';
                lastDeletedTask = null;
            }
        }

        function changeWeek(days) {
            currentDate.setDate(currentDate.getDate() + days);
            renderWeek();
        }

        function showModal() {
            document.getElementById('task-modal').style.display = 'flex';
            document.getElementById('task-date').value = new Date().toISOString().split('T')[0];
        }

        function hideModal() {
            document.getElementById('task-modal').style.display = 'none';
            document.getElementById('task-title').value = '';
            document.getElementById('task-description').value = '';
        }

        // Инициализация
        setTimeout(() => {
            document.getElementById('splash-screen').style.display = 'none';
            renderWeek();
        }, 2000);
			</script>
</body>

</html>
